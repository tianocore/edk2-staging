## @file
# Azure Pipielines YML file that uses a GitHub API to check if a PR against
# edk2-ci is from a submitter that is a member of the EDK II Maintainers team
# in the TianoCore organization on GitHub.
#
# Copyright (c) 2019, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
#
# https://developer.github.com/v3/teams/members/#get-team-membership
# https://github.com/tianocore
# https://github.com/orgs/tianocore/teams/edk-ii-maintainers
#
##

trigger: none

pr:
- edk2-ci

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: pip install --user requests
  displayName: 'Install Python requests module'
- task: PythonScript@0
  displayName: 'Check EDK II Maintainers team membership'
  inputs:
    arguments: $(GitHubPAT) $(Build.Repository.Id) $(System.PullRequest.PullRequestNumber) 1649488
    scriptSource: inline
    script: |
      import sys
      import requests
      #
      # Check number of arguments
      #
      if len(sys.argv) < 5:
        print('CheckGitHubTeamMembership: Too few arguments.')
        print('Usage: CheckGitHubTeamMembership <Token> <RepoId> <PR#> <Team#>')
        sys.exit(1)
      print (sys.argv)
      #
      # Generate GitHub API request for PR and parse user from JSON response
      #
      Url = 'https://api.github.com/repos/{RepoId}/pulls/{PrNumber}'.format(
              RepoId=sys.argv[2],
              PrNumber=sys.argv[3]
              )
      print(Url)
      PullRequest = requests.get(Url).json()
      print(PullRequest)
      if 'user' in PullRequest and 'login' in PullRequest['user']:
        User = PullRequest['user']['login']
      else:
        print('CheckGitHubTeamMembership: Invalid pull request number {PrNumber}.'
              .format(PrNumber=sys.argv[3]))
        sys.exit(1)
      #
      # Generate GitHub API request to check if user is a member of a team and
      # parse the JSON response
      #
      Url = 'https://api.github.com/teams/{Team}/memberships/{User}'.format(
              Team=sys.argv[4],
              User=User
              )
      print(Url)
      Membership = requests.get(Url, auth=('mdkinney', sys.argv[1])).json()
      print(Membership)
      #
      # If JSON response does not contain a 'state' or 'role' field, then exit with
      # an error.
      #
      if 'state' not in Membership or 'role' not in Membership:
        print('CheckGitHubTeamMembership: User {User} not found.'
              .format(User=User))
        sys.exit(1)
      #
      # If JSON response does not show the user as active, then exit with an error.
      #
      if Membership['state'] not in ['active']:
        print('CheckGitHubTeamMembership: User {User} is not active.'
              .format(User=User))
        sys.exit(1)
      #
      # If JSON response does not show the user with a role of member or maintainer,
      # then exit with an error
      #
      if Membership['role'] not in ['member', 'maintainer']:
        print('CheckGitHubTeamMembership: User {User} is not a member/maintainer.'
              .format(User=User))
        sys.exit(1)
      #
      # JSON response indicates that user is an active member/maintainer.  Exit
      # with success.
      #
      print('CheckGitHubTeamMembership: User {User} is active {Role}.'
          .format(User=User, Role=Membership['role']))
